import math
import random
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider, RadioButtons
import pointpats
from shapely.geometry import Polygon
#This code uses chaos gama to generate an approximate picture of Sierpinski triangle.
#Pro is that it runs way faster than 'Normal' generation of Sierpinski
#See wikipedia for explanation: https://en.wikipedia.org/wiki/Chaos_game
# and section Chaos game in: https://en.wikipedia.org/wiki/Sierpi%C5%84ski_triangle

#Setup of the triangle
length = 200
height = math.sqrt(length**2 -  (length/2)**2)
#vertices = [[0,0],[length, 0], [0,length], [length, length]]
vertices = [[0, 0], [length, 0], [length / 2, height]]
triangle = Polygon(vertices)

#Setup of plot
_, ax = plt.subplots()


#Function to move point toward 1 of the corners
def move_point(point):
    vertice = vertices[random.randrange(3)]
    return 1/2 * (point + vertice)

def draw_fractal(iterations):
    ax.clear()
    #Start point is random point in triangle (If point is not part of Sierpinski it will create points outside Sierpinski but converge towards Sierpinski
    current_point = pointpats.random.poisson(triangle, size=1)

    x_coords = []
    y_coords = []
    #Running the iterative chaos game
    for i in range(iterations):
        current_point = move_point(current_point)
        x_coords.append(current_point[0])
        y_coords.append(current_point[1])

    ax.set_xlim(0, 210)
    ax.set_ylim(0, 200)
    ax.axis('off')
    ax.set_aspect('equal')

    #Plot the points generated by the Chaos game
    ax.scatter(x_coords, y_coords, marker='^', s=0.5, color='black')


#Initial draw
draw_fractal(1000)

ax_slider = plt.axes((0.25, 0.05, 0.5, 0.03))
slider = Slider(ax_slider, 'Iterations', 1000, 50000, valinit=1000, valstep=1000)

def update(_=None):
    iterations = int(slider.val)
    draw_fractal(iterations)


slider.on_changed(update)

plt.show()
